datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  // sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  
  subscriptions Subscription[]
  offers        Offer[]

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

// model Session {
//   sessionToken String   @unique
//   userId       String
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model VerificationToken {
//   identifier String
//   token      String
//   expires    DateTime

//   @@id([identifier, token])
// }

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Subscription {
  id            String    @id @default(cuid())
  title         String
  slug          String   
  price         Float
  dueType       String
  dueDay        Int
  endDatetime   DateTime?
  startDatetime DateTime

  user       User       @relation(fields: [userId], references: [id])
  userId     String
  companies  Company[]
  categories Category[]
  offers     Offer[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

   @@unique([slug, userId])
}

model Offer {
  id             String    @id @default(cuid())
  name           String
  slug           String    @unique
  description    String
  imageLink      String?
  promoCode      String?
  price          Float
  normalPrice    Float
  expirationDate DateTime?
  rankingScore   Float?

  user          User           @relation(fields: [userId], references: [id])
  userId        String
  companies     Company[]
  categories    Category[]
  subscriptions Subscription[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Company {
  id   String @id @default(cuid())
  name String
  slug String @unique

  offers        Offer[]
  subscriptions Subscription[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id   String @id @default(cuid())
  name String
  slug String @unique

  offers        Offer[]
  subscriptions Subscription[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
