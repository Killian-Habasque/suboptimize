generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  accounts      Account[]
  Authenticator Authenticator[]
  offers        Offer[]
  subscriptions Subscription[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Subscription {
  id            String     @id @default(cuid())
  title         String
  slug          String
  price         Float
  dueType       String
  dueDay        Int
  endDatetime   DateTime?
  startDatetime DateTime
  userId        String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  customCompany String?
  user          User       @relation(fields: [userId], references: [id])
  categories    Category[] @relation("CategoryToSubscription")
  companies     Company[]  @relation("CompanyToSubscription")
  offers        Offer[]    @relation("OfferToSubscription")

  @@unique([slug, userId])
}

model Offer {
  id             String         @id @default(cuid())
  name           String
  slug           String         @unique
  description    String
  imageLink      String?
  promoCode      String?
  price          Float
  normalPrice    Float
  expirationDate DateTime?
  rankingScore   Float?
  userId         String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  user           User           @relation(fields: [userId], references: [id])
  categories     Category[]     @relation("CategoryToOffer")
  companies      Company[]      @relation("CompanyToOffer")
  subscriptions  Subscription[] @relation("OfferToSubscription")
}

model Company {
  id            String         @id @default(cuid())
  name          String
  slug          String         @unique
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  imageLink     String?
  offers        Offer[]        @relation("CompanyToOffer")
  subscriptions Subscription[] @relation("CompanyToSubscription")
}

model Category {
  id            String         @id @default(cuid())
  name          String
  slug          String         @unique
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  offers        Offer[]        @relation("CategoryToOffer")
  subscriptions Subscription[] @relation("CategoryToSubscription")
}
